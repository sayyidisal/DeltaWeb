{"version":3,"sources":["question.js"],"names":["bin2String","array","String","fromCharCode","apply","reformat","data","res","ANSWER","body","BODY","startIndex","indexOf","endIndex","graph","JSON","parse","substring","new_body","GRAPH","angular","module","directive","restrict","templateUrl","controller","$scope","links","home","other","login","$http","questionData","hasLogin","title","hasCode","code","tags","download_link","graphData","content","question","vizJSAV","animate","showAnswer","toShow","jQuery","document","ready","$","prettyPrint"],"mappings":"AAiFA,QAASA,YAAWC,GACnB,MAAOC,QAAOC,aAAaC,MAAMF,OAAQD,GAG1C,QAASI,UAASC,GACjB,GAAIC,KACJA,GAAIC,OAASF,EAAKE,MAClB,IAAIC,GAAOH,EAAKI,KAEZC,EAAaF,EAAKG,QAAQ,WAE1BC,EAAWJ,EAAKG,QAAQ,WAE5B,IAAKD,EAAa,IAAQE,EAAW,GAAK,CACzC,GAAIC,GAAQC,KAAKC,MAAMP,EAAKQ,UAAUN,EAAa,EAAGE,EAAW,IAC7DK,EAAWT,EAAKQ,UAAU,EAAGN,GAAcF,EAAKQ,UAAUJ,EAAW,EAEzEN,GAAIY,MAAQJ,KAAKC,MAAMhB,WAAWc,IAClCP,EAAIG,KAAOQ,EAGZ,MAAOX,IAtGR,WACCa,QAAQC,OAAO,wBAEdC,UAAU,UAAW,WACrB,OACCC,SAAU,IACVC,YAAa,WAEbC,YAAa,SAAU,SAASC,GAE/BA,EAAOC,OACNC,KAAM,aACNC,MAAO,aACPC,MAAO,oBAOVL,WAAW,gBAAiB,QAAS,SAAU,SAASM,EAAOL,GAO/DM,cACCC,UAAU,EACVC,MAAO,kDACPxB,KAAM,2sHACNyB,SAAS,EACTC,KAAM,0hBAeN5B,OAAQ,49BAWR6B,MAAO,SAAU,SACjBC,cAAe,oBAGhB,IAAIC,GAAYlC,SAAS2B,aACzBA,cAAaQ,QAAUD,EAAgB,KACvCb,EAAOe,SAAWT,YAClB,IAAIlB,GAAQ,GAAI4B,SAAQ,KAAMH,EAAiB,MAC/CzB,GAAM6B,QAAQ,GAEdjB,EAAOkB,YAAa,EACpBlB,EAAOmB,OAAS,WACfnB,EAAOkB,YAAclB,EAAOkB,kBAO/BE,OAAOC,UAAUC,MAAM,SAASC,GAC/BC","file":"question.min.js","sourcesContent":["(function() {\n\tangular.module('platform-question', [])\n\n\t.directive('navBar', [function() {\n\t\treturn {\n\t\t\trestrict: 'E',\n\t\t\ttemplateUrl: \"nav.html\",\n\t\t\t// controlerAs:\"nav\", \n\t\t\tcontroller: ['$scope', function($scope) {\n\t\t\t\t//pass links throught json\n\t\t\t\t$scope.links = {\n\t\t\t\t\thome: \"index.html\",\n\t\t\t\t\tother: \"other.html\",\n\t\t\t\t\tlogin: \"login.html\",\n\t\t\t\t}\n\t\t\t}],\n\t\t};\n\t}])\n\n\n\t.controller('QuestionCtrl', ['$http', '$scope', function($http, $scope) {\n\t\t// get initial question data\n\t\t// $scope.question={};\n\t\t// $http.get('/question.json').success(function(data) {\n\t\t// \t$scope.question=data; //data to be a list of questions\n\t\t// \t$scope.$apply();\n\t\t// })\n\t\tquestionData = {\n\t\t\thasLogin: true,\n\t\t\ttitle: \"Nest Thermostat temperature not getting updated\",\n\t\t\tBODY: \"What is the result of dequeue for <graph>\\\"[123, 10, 32, 32, 32, 32, 34, 115, 116, 97, 116, 101, 109, 101, 110, 116, 95, 49, 34, 58, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 34, 99, 111, 110, 115, 111, 108, 101, 34, 58, 32, 91, 93, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 34, 99, 117, 114, 114, 101, 110, 116, 95, 99, 111, 110, 116, 101, 110, 116, 34, 58, 32, 34, 120, 32, 61, 32, 81, 117, 101, 117, 101, 46, 114, 97, 110, 100, 111, 109, 40, 108, 101, 110, 103, 116, 104, 61, 52, 44, 32, 118, 97, 108, 114, 97, 110, 103, 101, 61, 114, 97, 110, 103, 101, 40, 49, 48, 48, 41, 41, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 34, 99, 117, 114, 114, 101, 110, 116, 95, 108, 105, 110, 101, 34, 58, 32, 49, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 34, 118, 97, 114, 115, 34, 58, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 100, 101, 112, 116, 104, 95, 49, 34, 58, 32, 91, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 101, 108, 101, 70, 108, 97, 103, 115, 34, 58, 32, 91, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 48, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 48, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 48, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 48, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 93, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 105, 110, 100, 101, 120, 34, 58, 32, 91, 93, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 105, 115, 69, 109, 112, 116, 121, 34, 58, 32, 34, 70, 97, 108, 115, 101, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 108, 101, 110, 103, 116, 104, 34, 58, 32, 34, 52, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 110, 97, 109, 101, 34, 58, 32, 34, 120, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 112, 111, 105, 110, 116, 101, 114, 34, 58, 32, 34, 78, 111, 110, 101, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 112, 111, 105, 110, 116, 101, 114, 73, 110, 100, 101, 120, 34, 58, 32, 91, 93, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 116, 121, 112, 101, 34, 58, 32, 34, 65, 114, 114, 97, 121, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 118, 97, 108, 117, 101, 34, 58, 32, 91, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 54, 52, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 52, 56, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 52, 56, 34, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 54, 53, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 93, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 118, 97, 114, 70, 108, 97, 103, 34, 58, 32, 49, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 93, 10, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 125, 10, 125, 10]\\\"</graph>?\",\n\t\t\thasCode: true,\n\t\t\tcode: \"from django.db import models \\n \\\n\t\t\t\t\t\tclass Poll(models.Model): question = models.CharField(max_length = 200) \\n \\\n\t\t\t\t\t\tpub_date = models.DateTimeField('date published') \\n \\\n\t\t\t\t\t\tclass Choice(models.Model): poll = models.ForeignKey(Poll) \\n \\\n\t\t\t\t\t\tchoice_text = models.CharField(max_length = 200) \\n \\\n\t\t\t\t\t\tvotes = models.IntegerField( \\n \\\n\t\t\t\t\t\t\tdefault = 0) \\n \\\n\t\t\t\t\t\t# ndsaklsdhaslk \\n \\\n\t\t\t\t\t\tclass FreshJuice { \\n \\\n\t\t\t\t\t\t\tenum FreshJuiceSize { \\n \\\n\t\t\t\t\t\t\t\tSIZE, MEDIUM, LARGE \\n \\\n\t\t\t\t\t\t\t} \\n \\\n\t\t\t\t\t\t\tFreshJuiceSize size; \\n \\\n\t\t\t\t\t\t} \\n \\\n\t\t\t\t\t}\",\n\t\t\tANSWER: \"The day-to-day working JSAV repository is located at GitHub. For new developers who want to use the Github working version of JSAV: \\n \\\n\t\t\t\t\tInstall Git\\n\\\n\t\t\t\t\tCheck out the JSAV repository.For example, at the commandline you can do the following to create a new JSAV folder or directory: git clone git: //github.com/vkaravir/JSAV.git JSAV (Note that this is a read-only URL. If you are joining the developer team, and you are not sufficiently familiar with Git to know what to do to set things up right to be able to push changes, talk to us about it.)\\n \\\n\t\t\t\t\t\t\tGo to the JSAV folder or directory that you just created and run: make This will \\\"compile\\\"\\\n\t\t\t\t\t\tthe\\n \\\n\t\t\t\t\t\tpieces together\\n \\\n\t\t\t\t\tfor you.At this point, you are ready to\\n \\\n\t\t\t\t\ttry out the examples or invoke your copy of JSAV in your own development projects.\\n \\\n\t\t\t\t\tFor SVN users new to git: \\n \\\n\t\t\t\t\t\tTo \\\"checkout\\\" a new copy of the library, use \\\"git clone\\\".\\n \\\n\t\t\t\t\tTo \\\"update\\\" your copy of the repository, use \\\"git pull\\\".\",\n\t\t\ttags: [\"Python\", \"Array\"],\n\t\t\tdownload_link: \"http://google.com\",\n\t\t};\n\n\t\tvar graphData = reformat(questionData);\n\t\tquestionData.content = graphData[\"BODY\"];\n\t\t$scope.question = questionData;\n\t\tvar graph = new vizJSAV(\"av\", graphData[\"GRAPH\"]);\n\t\tgraph.animate(1);\n\n\t\t$scope.showAnswer = false;\n\t\t$scope.toShow = function() {\n\t\t\t$scope.showAnswer = !$scope.showAnswer;\n\t\t}\n\n\t}]);\n\n})()\n\njQuery(document).ready(function($) {\n\tprettyPrint();\n});\n\nfunction bin2String(array) {\n\treturn String.fromCharCode.apply(String, array);\n}\n\nfunction reformat(data) {\n\tvar res = {};\n\tres.ANSWER = data.ANSWER;\n\tvar body = data.BODY;\n\n\tvar startIndex = body.indexOf(\"<graph>\");\n\n\tvar endIndex = body.indexOf(\"</graph>\");\n\n\tif ((startIndex > -1) && (endIndex > -1)) {\n\t\tvar graph = JSON.parse(body.substring(startIndex + 8, endIndex - 1));\n\t\tvar new_body = body.substring(0, startIndex) + body.substring(endIndex + 8);\n\n\t\tres.GRAPH = JSON.parse(bin2String(graph));\n\t\tres.BODY = new_body;\n\t}\n\n\treturn res;\n}"],"sourceRoot":"/source/"}